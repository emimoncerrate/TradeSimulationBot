# =============================================================================
# Jain Global Slack Trading Bot - Environment Configuration Template
# =============================================================================
# Copy this file to .env and fill in your actual values
# Never commit .env files to version control

# =============================================================================
# APPLICATION SETTINGS
# =============================================================================
# Deployment environment: development, staging, production
ENVIRONMENT=development

# Logging level: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# Enable debug mode (should be false in production)
DEBUG_MODE=true

# =============================================================================
# SLACK APPLICATION CONFIGURATION
# =============================================================================
# Slack Bot User OAuth Token (starts with xoxb-)
# Get this from your Slack app's "OAuth & Permissions" page
SLACK_BOT_TOKEN=xoxb-your-bot-token-here

# Slack App Signing Secret (32+ character string)
# Get this from your Slack app's "Basic Information" page
SLACK_SIGNING_SECRET=your-signing-secret-here

# Slack App-Level Token (starts with xapp-) - Optional for Socket Mode
SLACK_APP_TOKEN=xapp-your-app-token-here

# Slack OAuth Configuration - Optional for user installation flow
SLACK_CLIENT_ID=your-client-id-here
SLACK_CLIENT_SECRET=your-client-secret-here
SLACK_OAUTH_REDIRECT_URL=https://your-domain.com/slack/oauth_redirect

# =============================================================================
# AWS CONFIGURATION
# =============================================================================
# AWS Region for all services
AWS_REGION=us-east-1

# AWS Access Key ID (if not using IAM roles)
AWS_ACCESS_KEY_ID=your-access-key-id

# AWS Secret Access Key (if not using IAM roles)
AWS_SECRET_ACCESS_KEY=your-secret-access-key

# DynamoDB table name prefix
DYNAMODB_TABLE_PREFIX=jain-trading-bot

# Amazon Bedrock model ID for AI risk analysis
BEDROCK_MODEL_ID=anthropic.claude-3-sonnet-20240229-v1:0

# AWS Lambda function name (for deployment)
AWS_LAMBDA_FUNCTION_NAME=jain-trading-bot-lambda

# API Gateway deployment stage
API_GATEWAY_STAGE=prod

# KMS encryption key ID for data encryption (optional)
ENCRYPTION_KEY_ID=your-kms-key-id

# =============================================================================
# MARKET DATA CONFIGURATION
# =============================================================================
# Finnhub API key for real-time market data
# Sign up at https://finnhub.io/ to get your free API key
FINNHUB_API_KEY=your-finnhub-api-key-here

# Finnhub API base URL (usually doesn't need to change)
FINNHUB_BASE_URL=https://finnhub.io/api/v1

# Market data cache TTL in seconds
MARKET_DATA_CACHE_TTL=60

# Rate limit for market data API calls per minute
MARKET_DATA_RATE_LIMIT=60

# Timeout for market data API calls in seconds
MARKET_DATA_TIMEOUT=10

# =============================================================================
# TRADING SYSTEM CONFIGURATION
# =============================================================================
# Enable mock trading execution (true for development/testing)
MOCK_EXECUTION_ENABLED=true

# Simulated execution delay in seconds
EXECUTION_DELAY_SECONDS=1.0

# Maximum position size per trade
MAX_POSITION_SIZE=10000

# Maximum trade value in USD
MAX_TRADE_VALUE=1000000.0

# Supported trading symbols (comma-separated)
SUPPORTED_SYMBOLS=AAPL,GOOGL,MSFT,AMZN,TSLA,META,NVDA,NFLX,SPY,QQQ

# =============================================================================
# SECURITY AND COMPLIANCE CONFIGURATION
# =============================================================================
# Approved Slack channels for trading (comma-separated channel IDs)
# Example: C1234567890,C0987654321
APPROVED_CHANNELS=

# User session timeout in minutes (480 = 8 hours)
SESSION_TIMEOUT_MINUTES=480

# Maximum failed authentication attempts before lockout
MAX_FAILED_ATTEMPTS=5

# Audit log retention period in days (2555 = ~7 years for compliance)
AUDIT_LOG_RETENTION_DAYS=2555

# =============================================================================
# DEVELOPMENT AND TESTING CONFIGURATION
# =============================================================================
# DynamoDB Local endpoint for development (when using docker-compose)
DYNAMODB_LOCAL_ENDPOINT=http://localhost:8000

# Redis endpoint for caching (optional)
REDIS_URL=redis://localhost:6379

# Test Slack workspace configuration
TEST_SLACK_WORKSPACE_ID=T1234567890
TEST_SLACK_CHANNEL_ID=C1234567890
TEST_SLACK_USER_ID=U1234567890

# =============================================================================
# MONITORING AND OBSERVABILITY
# =============================================================================
# CloudWatch log group name
CLOUDWATCH_LOG_GROUP=/aws/lambda/jain-trading-bot

# Metrics namespace for CloudWatch
METRICS_NAMESPACE=JainTradingBot

# Enable detailed monitoring (can increase costs)
DETAILED_MONITORING=false

# Sentry DSN for error tracking (optional)
SENTRY_DSN=https://your-sentry-dsn-here

# =============================================================================
# DOCKER AND CONTAINERIZATION
# =============================================================================
# Docker image repository
DOCKER_REPOSITORY=jain-global/slack-trading-bot

# Docker image tag
DOCKER_TAG=latest

# Container port for local development
CONTAINER_PORT=3000

# =============================================================================
# EXAMPLE VALUES FOR DEVELOPMENT
# =============================================================================
# Uncomment and modify these for local development:

# SLACK_BOT_TOKEN=xoxb-your-actual-bot-token-here
# SLACK_SIGNING_SECRET=your-actual-signing-secret-here
# FINNHUB_API_KEY=your-actual-api-key-here
# APPROVED_CHANNELS=C1234567890,C0987654321

# =============================================================================
# PRODUCTION DEPLOYMENT NOTES
# =============================================================================
# For production deployment:
# 1. Set ENVIRONMENT=production
# 2. Set DEBUG_MODE=false
# 3. Set LOG_LEVEL=INFO or WARNING
# 4. Configure all required AWS credentials and permissions
# 5. Set up proper Slack app with production OAuth tokens
# 6. Configure approved channels for your organization
# 7. Set up monitoring and alerting
# 8. Enable encryption with KMS key
# 9. Configure backup and disaster recovery
# 10. Set up proper network security and VPC configuration